buildscript {
	ext {
		springBootVersion = '1.4.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

apply from: "$rootDir/code-quality.gradle"

jar {
	baseName = 'spring-integration-datatransfer'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
    jcenter()
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web:1.4.1.RELEASE')


	compile('org.springframework.boot:spring-boot-starter-integration:1.4.1.RELEASE')
    compile('org.springframework.boot:spring-boot-starter-jdbc:1.4.1.RELEASE')
    compile('org.springframework.integration:spring-integration-core:4.3.2.RELEASE')
    compile('org.springframework.integration:spring-integration-file:4.3.2.RELEASE')
    compile('org.springframework.integration:spring-integration-twitter:4.3.2.RELEASE')
    compile('org.springframework.integration:spring-integration-jdbc:4.3.2.RELEASE')
    compile('org.springframework.integration:spring-integration-aws:1.0.0.RELEASE')
    compile('org.springframework.social:spring-social-twitter')
    compile('commons-dbcp:commons-dbcp:1.4')
    compile('net.sourceforge.jtds:jtds:1.3.1')
    compile("com.h2database:h2")

    compileOnly('org.projectlombok:lombok:1.16.10')

    testCompile('de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.assertj:assertj-core:3.5.2')
    testCompile('org.assertj:assertj-core-java8:1.0.0m1')
    testCompile('com.github.regis-leray:factory-duke:0.8')
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task reports(dependsOn: [ 'check', 'test', 'javadoc', 'jacocoTestReport'] ) << {
	println 'Reports generated.'
}

test.finalizedBy jacocoTestReport

processResources {
	expand(project.properties)
}

// Copy resources before compiling Java
compileJava.dependsOn(processResources)

// Generate JaCoCo report and Javadoc when building
tasks.build.dependsOn(jacocoTestReport, javadoc)

bootRun {
    if ( project.hasProperty('jvmArgs') ) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}
